//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  D:\Personal\Projects\MBRDI\ExtractAndOffsetSurface\ExtractAndOffsetUI.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: snagareddy
//              Version: NX 12
//              Date: 07-01-2021  (Format: mm-dd-yyyy)
//              Time: 02:20 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using NXOpen;
using NXOpen.Assemblies;
using NXOpen.BlockStyler;
using NXOpen.Facet;
using NXOpen.Features;
using NXOpen.UF;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class ExtractAndOffsetUI
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private static Part workPart;
    private static UFSession theUfSession;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private NXOpen.BlockStyler.FaceCollector SelectFaceBtn;// Block type: Face Collector
    
    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public ExtractAndOffsetUI()
    {
        try
        {
            theSession = Session.GetSession();
            theUfSession = UFSession.GetUFSession();
            workPart = theSession.Parts.Work;
            theUI = UI.GetUI();
            theDlxFileName = @"D:\Personal\Projects\MBRDI\ExtractAndOffsetSurface\ExtractAndOffsetSurface\ExtractAndOffsetSurface\ExtractAndOffsetUI.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //
    //    You can create the dialog using one of the following way:
    //
    //    1. Journal Replay
    //
    //        1) Replay this file through Tool->Journal->Play Menu.
    //
    //    2. USER EXIT
    //
    //        1) Create the Shared Library -- Refer "Block UI Styler programmer's guide"
    //        2) Invoke the Shared Library through File->Execute->NX Open menu.
    //
    //------------------------------------------------------------------------------
    public static void Main()
    {
        ExtractAndOffsetUI theExtractAndOffsetUI = null;
        try
        {
            theExtractAndOffsetUI = new ExtractAndOffsetUI();
            // The following method shows the dialog immediately
            theExtractAndOffsetUI.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if(theExtractAndOffsetUI != null)
                theExtractAndOffsetUI.Dispose();
                theExtractAndOffsetUI = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
     public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
         return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }
    
    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if(theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }
    
    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------
    
    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            SelectFaceBtn = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("SelectFaceBtn");
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
            TaggedObject[] selectedObjects = SelectFaceBtn.GetSelectedObjects();
            List<Face> selectedFaces = new List<Face>(0);
            foreach (TaggedObject selectedObject in selectedObjects)
            {
                if (selectedObject is Face)
                {
                    // UFFacet ufFacet = theUfSession.Facet;
                    selectedFaces.Add(selectedObject as Face);
                }
            }

            if (selectedFaces.Any())
            {
                ExtractFace(selectedFaces.ToArray());
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb( NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if(block == SelectFaceBtn)
            {
            //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }
    
    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }
    
    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist =null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

    #region Custom Code

    public void ExtractFace(Face[] iFaces)
    {
        BasePart iFaceOwningPart = null;
        Component iFaceOwningComponent = null;
        if (iFaces.Any())
        {
            Face iFace = iFaces[0];
            iFaceOwningPart = iFace.OwningPart;
            iFaceOwningComponent = iFace.OwningComponent;
        }

        if (iFaceOwningPart == null)
        {
            return;
        }

        PartLoadStatus loadStatus;
        theSession.Parts.SetWorkComponent(iFaceOwningComponent, out loadStatus);

        ExtractFaceBuilder extractFaceBuilder1 = theSession.Parts.Work.Features.CreateExtractFaceBuilder(null);
        extractFaceBuilder1.ParentPart = ExtractFaceBuilder.ParentPartType.WorkPart;
        extractFaceBuilder1.DeleteHoles = false;
        extractFaceBuilder1.Associative = false;
        extractFaceBuilder1.FixAtCurrentTimestamp = false;
        extractFaceBuilder1.HideOriginal = false;
        extractFaceBuilder1.InheritDisplayProperties = false;
        extractFaceBuilder1.Type = ExtractFaceBuilder.ExtractType.Face;
        foreach (Face iFace in iFaces)
        {
            bool added1 = extractFaceBuilder1.ObjectToExtract.Add(iFace);
        }

        NXObject nXObject1 = extractFaceBuilder1.Commit();
        extractFaceBuilder1.Destroy();

        if (nXObject1 != null)
        {
            ExtractFace extractedFace = nXObject1 as ExtractFace;
            if (extractedFace != null)
            {
                Body firstOrDefault = extractedFace.GetBodies().FirstOrDefault();
                //Extract Faceted Bodies
                theSession.Parts.SetWork(workPart);


                FacetedBody[] facetBodies;
                int[] errorTable;
                FacetBodyFromBodyBuilder facetBodyFromBodyBuilder = workPart.FacetedBodies.FacetModelingCollection.CreateFacetBodyFromBodyBuilder();
                facetBodyFromBodyBuilder.Associative = false;
                facetBodyFromBodyBuilder.NonFacetedBodiesToConvert.Add(firstOrDefault);
                facetBodyFromBodyBuilder.OriginalBodyOption = FacetBodyFromBodyBuilder.OriginalBodyOptions.Keep;
                facetBodyFromBodyBuilder.OutputType = FacetBodyFromBodyBuilder.OutputTypes.NXFacetBody;
                if (facetBodyFromBodyBuilder.Validate())
                {
                    NXObject nxObject = facetBodyFromBodyBuilder.Commit();
                }

                facetBodyFromBodyBuilder.Destroy();
                //CreateFacetBody(new Body[]{ firstOrDefault }, out facetBodies, out errorTable);
                //workPart.FacetedBodies.CreateFacetBodyFromFaces(new Face[] { iFace }, out facetBodies, out errorTable);
                //if (facetBodies.Length > 0)
                //{
                //    foreach (FacetedBody facetedBodyJt in facetBodies)
                //    {
                //       workPart.FacetedBodies.Convert(facetedBodyJt,  FacetedBodyCollection.Type.Nx);
                //    }
                //}

                //Delete Extracted Face

            }
        }


    }

    #endregion

}
